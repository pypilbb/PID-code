/*
Black line follower code

PID code
*/

float Kp=0,Ki=0,Kd=0;
float error=0, P=0, I=0, D=0, PID_value=0;
float previous_error=0, previous_I=0;
int sensor[5]={0, 0, 0, 0, 0};
int initial_motor_speed=100;

void read_sensor_values(void);
void calculate_pid(void);
void motor_control(void);

int leftMotorSpeed = 100;
int rightMotorSpeed = 100;

//motor
        //right
int motor_r_forward = 7;
int motor_r_reverse = 6;
int motor_r_enable  =10;
        //left
int motor_l_forward = 9;
int motor_l_reverse = 8;
int motor_l_enable  =11;


void motor_run()  //motor speed b/w   -255  to 255
{


   // Calculating the effective motor speed:
    leftMotorSpeed = leftMotorSpeed - PID_value;
    rightMotorSpeed = rightMotorSpeed + PID_value;
    
    // The motor speed should not exceed the max PWM value
    //constrain(left_motor_speed,0,255);
    //constrain(right_motor_speed,0,255);
  
 
  if(leftMotorSpeed >= 0)

    {

        analogWrite(motor_l_enable, leftMotorSpeed);
        digitalWrite(motor_l_forward, HIGH);
        digitalWrite(motor_l_reverse, LOW);

    }

    else

    {   int j=255+rightMotorSpeed;
        Serial.println("backward");
        analogWrite(motor_l_enable, j);
        digitalWrite(motor_l_reverse, HIGH);
        digitalWrite(motor_l_forward ,LOW);
    }

    if(rightMotorSpeed >= 0)

    { 
        analogWrite(motor_r_enable,rightMotorSpeed);
        digitalWrite(motor_r_forward, HIGH);
        digitalWrite(motor_r_reverse, LOW);

    }

    else

    {  int n=255+rightMotorSpeed;

        analogWrite(motor_r_enable,n);
        digitalWrite(motor_r_forward, LOW);
        digitalWrite(motor_r_reverse, HIGH);

    }


}


void setup()
{
  
  
  Serial.begin(9600);
  pinMode(A0 , INPUT);
  pinMode(A1 , INPUT);
  pinMode(A2 , INPUT);
  pinMode(A3 , INPUT);
  pinMode(A4 , INPUT);
  
  pinMode(motor_r_forward, OUTPUT);
  pinMode(motor_r_reverse, OUTPUT);
  pinMode(motor_l_forward, OUTPUT);
  pinMode(motor_l_reverse, OUTPUT);


}



void loop()
{


read_sensor_values();
calculate_pid();
motor_run();


}


void read_sensor_values() {

  sensor[0]=analogRead(A0);
  sensor[2]=analogRead(A2);
  sensor[1]=analogRead(A1);
  sensor[3]=analogRead(A3);
  sensor[4]=analogRead(A4);


  calculate_error(300 , 600);
  
  for (int i = 0; i < 5 ; i++) {
  // + " " + sensor[1] + " " + sensor[2] + " " + sensor[3]  + " " + sensor[4] );
  Serial.print(sensor[i]);
  Serial.print(" ");
  }
  Serial.println();
  delay(500);

}


void calculate_pid()
{
    P = error;
    I = I + previous_I;
    D = error-previous_error;
    
    PID_value = (Kp*P) + (Ki*I) + (Kd*D);
    
    previous_I=I;
    previous_error=error;
}


void calculate_error(int black, int white) {
  
   
  if( (sensor[0]<=black)&&(sensor[1]>=white)&&(sensor[2]>=white)&&(sensor[4]>=white)&&(sensor[4]>=white) ) //B W W W W W
  error = 3;
  else if( (sensor[0]<=black)&&(sensor[1]<=black)&&(sensor[2]>=white)&&(sensor[4]>=white)&&(sensor[4]>=white) ) //B B W W W
  error = 2;
  else if( (sensor[0]<=black)&&(sensor[1]<=black)&&(sensor[2]<=black)&&(sensor[4]>=white)&&(sensor[4]>=white) ) //B B B W W
  error = 1;
  else if( (sensor[0]>=white)&&(sensor[1]<=black)&&(sensor[2]<=black)&&(sensor[4]<=black)&&(sensor[4]>=white) ) //W B B B W
  error = 0;
  else if((sensor[0]>=white)&&(sensor[1]>=white)&&(sensor[2]<=black)&&(sensor[4]<=black)&&(sensor[4]<=black)) // W W B B B 
  error = -1;
  else if((sensor[0]>=white)&&(sensor[1]>=white)&&(sensor[2]>=white)&&(sensor[4]<=black)&&(sensor[4]<=black) ) // W W W B B
  error = -2;
  else if((sensor[0]>=white)&&(sensor[1]>=white)&&(sensor[2]>=white)&&(sensor[4]>=white)&&(sensor[4]==0)) // W W W W B
  error = -3;
  else if((sensor[0]>=white)&&(sensor[1]>=white)&&(sensor[2]>=white)&&(sensor[4]>=white)&&(sensor[4]>=white)) //  W W W W W
    if(error == -3) error = -4;
    else error = 4;

    Serial.println(error );
    Serial.println("\n");
   // delay(1000);

}
